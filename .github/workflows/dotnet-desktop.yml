name: Build .NET Applications

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Api_Project_Path: ./Main/Server/Server.API/Server.API.csproj
      WebApp_Project_Path: ./Main/Application/Application.WebApp/Application.WebApp.csproj
      Game_Project_Path: ./Main/Server/Server.Game/Server.Starter/Server.Starter.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore all projects
      run: |
        dotnet clean 
        dotnet restore --no-cache
        
    - name: Building API
      run: dotnet build $env:Api_Project_Path --configuration ${{ matrix.configuration }}

    - name: Build Server.Game
      run: dotnet build $env:Game_Project_Path --configuration ${{ matrix.configuration }}

    - name: Building Blazor
      run: dotnet build $env:WebApp_Project_Path --configuration ${{ matrix.configuration }}
      

    - name: Publish API
      run: dotnet publish $env:Api_Project_Path --configuration ${{ matrix.configuration }} --output ./output/Server.API
      
    - name: Publish Game
      run: dotnet publish $env:Game_Project_Path --configuration ${{ matrix.configuration }} --output ./output/Server.Game

    - name: Publish Blazor
      run: dotnet publish $env:WebApp_Project_Path --configuration ${{ matrix.configuration }} /p:PublishTrimmed=false --output ./output/Application.WebApp

    - name: Create Archive
      run: |
        Compress-Archive -Path ./output/* -DestinationPath ./output.zip

    - name: Split file
      run: |
        $filePath = './output/output.zip'
        $fileSize = (Get-Item $filePath).Length
        $splitSize = 64MB
        $chunkCount = [math]::Ceiling($fileSize / $splitSize)
    
        for ($i = 0; $i -lt $chunkCount; $i++) {
          $startByte = $i * $splitSize
          $endByte = [math]::Min($fileSize, ($i + 1) * $splitSize) - 1
          $chunkName = "./output/output_part_$i.zip"
          (Get-Content $filePath -AsByteStream -ReadCount 0 -TotalCount $splitSize).WriteTo($chunkName)
        }

    - name: Upload split files
      uses: actions/upload-artifact@v3
      with:
        name: output
        path: ./output/output_part_*.zip
