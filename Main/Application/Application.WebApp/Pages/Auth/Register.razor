@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations



<EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
    <MudDivider DividerType="DividerType.FullWidth" />
    <MudText Class="my-5" Typo="Typo.h4">Register</MudText>
    <MudDivider DividerType="DividerType.FullWidth" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudGrid Spacing="1">
        <MudItem xs="12"  >
            <MudTextField T="string" @bind-Value="@RegisterModel.Email" Placeholder="Email" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Email" Label="Email" Required="true" RequiredError="Email is required!" />
        </MudItem>

        <MudItem xs="12" >
            <MudTextField T="string" @bind-Value="@RegisterModel.Password" Placeholder="Password" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Password" Label="Password" Required="true" RequiredError="Password is required!" />
        </MudItem>

        <MudItem xs="12" >
            <MudTextField T="string" @bind-Value="@RepeatPasssword" Placeholder="Repeat Password" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Password" Label="Repeat Password" Required="true" RequiredError="Repeat Password is required!" />
        </MudItem>

        <MudItem xs="12" >
            <MudCheckBox @bind-Value="IsChecked" UncheckedColor="Color.Error" Dense="true" Color="Color.Success" Label="I agree to the rules to enter the game."></MudCheckBox>
        </MudItem>

        <MudItem xs="12" Class="my-3" >
            <MudButton ButtonType="ButtonType.Submit" Disabled="!IsChecked" Class="mt-4" StartIcon="@Icons.Material.Filled.Send"  Variant="Variant.Filled" Color="Color.Secondary">Register</MudButton>
        </MudItem>

        @if (ShowErrors)
        {
            <MudItem xs="12">
                @foreach (var Error in Errors)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@Error </MudAlert>
                }
            </MudItem>
        }
    </MudGrid>
</EditForm>





@code {


    private User RegisterModel = new();
    String RepeatPasssword = "";
    bool IsChecked = false;
    bool ShowErrors = false;
    List<string>? Errors = new();


    private async Task HandleRegister()
    {
        try
        {
            Errors = new();
            ShowErrors = false;

            if (RepeatPasssword != RegisterModel.Password)
            {
                Errors.Add("The password is different from the repeated password!");
                ShowErrors = true;
                throw new InvalidDataException();
            }


            var result = await AuthService.Register(RegisterModel);
            if (result.Token is not null)
            {
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                ShowErrors = true;
            }
        }
        catch (InvalidDataException ex)
        {

        }
        catch (Exception ex)
        {
            Errors = JsonConvert.DeserializeObject<List<string>>(ex.Message);
            ShowErrors = true;
        }


    }
}

