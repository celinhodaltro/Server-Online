@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations





<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <MudText Class="mb-5" Typo="Typo.h4">Login</MudText>
    <MudDivider DividerType="DividerType.Middle"/>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-2">
        <MudTextField T="string" @bind-Value="@loginModel.Email" Variant="Variant.Outlined" ShrinkLabel="true" InputType="InputType.Email" Label="Email" Required="true" RequiredError="Email is required!" />
    </div>

    <div class="form-group mt-2">
        <MudTextField T="string" @bind-Value="@loginModel.Password" Variant="Variant.Outlined" ShrinkLabel="true" InputType="InputType.Password" Label="Password" Required="true" RequiredError="Password is required!" />
    </div>

    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Person" Class="mt-4" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>


</EditForm>



@if (ShowErrors)
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@Error </MudAlert>
}


@code {
    private User loginModel = new();
    String RepeatPasssword = "";
    bool ShowErrors = false;
    string Error = String.Empty;

    private async Task HandleLogin()
    {
        try
        {
            ShowErrors = false;
            var result = await AuthService.Login(loginModel);

            if (result.Token is not null)
            {
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                ShowErrors = true;
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            ShowErrors = true;
        }

    }
}

