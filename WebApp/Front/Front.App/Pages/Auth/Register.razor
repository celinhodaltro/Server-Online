@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations



<EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
    <MudText Class="mb-5" Typo="Typo.h4">Register</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-2">
        <MudTextField T="string" @bind-Value="@RegisterModel.Email" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Email" Label="Email" Required="true" RequiredError="Email is required!" />
    </div>

    <div class="form-group mt-2">
        <MudTextField T="string" @bind-Value="@RegisterModel.Password" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Password" Label="Password" Required="true" RequiredError="Password is required!" />
    </div>

    <div class="form-group mt-2">
        <MudTextField T="string" @bind-Value="@RepeatPasssword" ShrinkLabel="true" Variant="Variant.Outlined" InputType="InputType.Password" Label="Repeat Password" Required="true" RequiredError="Repeat Password is required!" />
    </div>

    <div class="form-group mt-2">
        <MudCheckBox @bind-Value="IsChecked" UncheckedColor="Color.Error" Dense="true" Color="Color.Success" Label="I agree to the rules to enter the game."></MudCheckBox>
    </div>

    <div class="form-group mt-2">
        <MudButton ButtonType="ButtonType.Submit" Disabled="!IsChecked" Class="mt-4" StartIcon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Color="Color.Secondary">Register</MudButton>
    </div>



    @if (ShowErrors)
    {
        <div class="form-group mt-2">
            @foreach(var Error in Errors)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@Error </MudAlert>
            }
        </div>
    }

</EditForm>




@code {


    private User RegisterModel = new();
    String RepeatPasssword = "";
    bool IsChecked = false;
    bool ShowErrors = false;
    List<string> Errors = new();

    private async Task HandleRegister()
    {
        try
        {
            Errors = new();
            ShowErrors = false;

            if (RepeatPasssword != RegisterModel.Password)
            {
                Errors.Add("The password is different from the repeated password!");
                ShowErrors = true;
                throw new InvalidDataException();
            }


            var result = await AuthService.Register(RegisterModel);
            if (result.Token is not null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ShowErrors = true;
            }
        }
        catch (InvalidDataException ex)
        {

        }
        catch (Exception ex)
        {
            Errors = JsonConvert.DeserializeObject<List<string>>(ex.Message);
            ShowErrors = true;
        }


    }
}

